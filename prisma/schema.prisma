generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Required Auth.JS tables:
model accounts {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
}

model sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @db.VarChar(255)
}

model users {
  id               Int              @id @default(autoincrement())
  name             String?          @db.VarChar(255)
  email            String?          @db.VarChar(255)
  emailVerified    DateTime?        @db.Timestamptz(6)
  image            String?
  // ðŸ‘† Required columns of AuthJS
  // ðŸ‘‡ App specific columns
  friends          users[]          @relation("UserFriends")
  friendOf         users[]          @relation("UserFriends")
  sentRequests     FriendRequests[] @relation("SentRequests")
  receivedRequests FriendRequests[] @relation("ReceivedRequests")
}

model verification_token {
  identifier String
  expires    DateTime @db.Timestamptz(6)
  token      String

  @@id([identifier, token])
}

// App's tables:

model FriendRequests {
  id         String   @id @default(uuid())
  senderId   Int
  receiverId Int
  status     String   @default("PENDING") // Could be "PENDING", "ACCEPTED", "REJECTED"
  createdAt  DateTime @default(now())
  sender     users    @relation("SentRequests", fields: [senderId], references: [id])
  receiver   users    @relation("ReceivedRequests", fields: [receiverId], references: [id])
}
